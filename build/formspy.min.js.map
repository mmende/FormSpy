{"version":3,"sources":["../src/js/FormSpy.js"],"names":["FormSpy","observe","element","data","path","nodeName","this","observeSelect","getAttribute","toLowerCase","trim","observeCheckbox","observeText","unobserve","observerID","observes","observer","close","removeEventListener","eventType","eventListener","observeJsIncluded","PathObserver","open","newValue","oldValue","value","keyupListener","Path","get","getValueFrom","setValueFrom","addEventListener","registerObserver","checkbox","checked","changeListener","select","option","querySelector","document","createElement","innerText","appendChild","selected","listener","type","id","observerIDs","onElementRemoval","callback","window","hasOwnProperty","mutObserver","MutationObserver","mutations","forEach","mutation","i","removedNodes","length","disconnect","parentElement","childList","removeListener","event","target","included","console","error"],"mappings":"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","file":"formspy.min.js","sourcesContent":["'use strict';\nvar FormSpy = (function () {\n    function FormSpy() {\n    }\n    /**\n     * Creates a two way observation between a form element and a data object.\n     * Currently supported elements are textarea or input[type=\"text\"|\"number\"|\"checkbox\"|...] and selects.\n     *\n     * @param  {HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement} element The form element to control.\n     * @param  {Object}                                                     data    The data to syncronize the data of the form element with.\n     * @param  {string = 'value'}                                           path    The path to store the value at inside the data object.\n     *\n     * @return {number}                   [description]\n     */\n    FormSpy.observe = function (element, data, path) {\n        if (path === void 0) { path = 'value'; }\n        // Check what type of observe is required\n        if (element.nodeName === 'SELECT')\n            return this.observeSelect(element, data, path);\n        if (element.nodeName === 'INPUT' && element.getAttribute('type') !== null && element.getAttribute('type').toLowerCase().trim() === 'checkbox')\n            return this.observeCheckbox(element, data, path);\n        return this.observeText(element, data, path);\n    };\n    /**\n     * Unobserves a textarea or input[type=\"text\"|\"number\"|...] and the data object again.\n     *\n     * @param {number} observerID The observerID received from observeText(...), observeCheckbox(...) or observeSelect(...).\n     */\n    FormSpy.unobserve = function (observerID) {\n        if (typeof this.observes[observerID] !== 'undefined') {\n            // Close the observe-js observer\n            this.observes[observerID].observer.close();\n            // Remove the eventListener\n            this.observes[observerID].element.removeEventListener(this.observes[observerID].eventType, this.observes[observerID].eventListener, false);\n            // Remove the reference\n            delete this.observes[observerID];\n        }\n    };\n    /**\n     * Creates a two way observation between a textarea or input[type=\"text\"|\"number\"|...] and a data object.\n     *\n     * @param {HTMLInputElement|HTMLTextAreaElement} element The checkbox to observe for changes.\n     * @param {Object}                               data    The object containing the value attribute.\n     * @param {string}                               path    The path for the value property.\n     *\n     * @return {number} The observer id to use to unobserve again.\n     */\n    FormSpy.observeText = function (element, data, path) {\n        if (path === void 0) { path = 'value'; }\n        if (!this.observeJsIncluded())\n            return;\n        var observer = new PathObserver(data, path);\n        observer.open(function (newValue, oldValue) {\n            // respond to data.<value> having changed value.\n            if (element.value !== newValue)\n                element.value = newValue;\n        });\n        var keyupListener = function () {\n            if (Path.get(path).getValueFrom(data) !== this.value)\n                Path.get(path).setValueFrom(data, this.value);\n        };\n        element.addEventListener('keyup', keyupListener, false);\n        return this.registerObserver(observer, keyupListener, 'keyup', element);\n    };\n    /**\n     * Creates a two way observation between a input[type=\"checkbox\"] and a data object.\n     *\n     * @param {HTMLInputElement} checkbox The checkbox to observe for changes.\n     * @param {Object}           data     The object containing the value attribute.\n     * @param {string}           path     The path for the value property.\n     *\n     * @return {number} The observer id to use to unobserve again.\n     */\n    FormSpy.observeCheckbox = function (checkbox, data, path) {\n        if (path === void 0) { path = 'value'; }\n        if (!this.observeJsIncluded())\n            return;\n        var observer = new PathObserver(data, path);\n        observer.open(function (newValue, oldValue) {\n            // respond to data.<value> having changed value.\n            checkbox.checked = newValue;\n        });\n        var changeListener = function () {\n            if (Path.get(path).getValueFrom(data) !== this.checked)\n                Path.get(path).setValueFrom(data, this.checked);\n        };\n        checkbox.addEventListener('change', changeListener, false);\n        return this.registerObserver(observer, changeListener, 'change', checkbox);\n    };\n    /**\n     * Creates a two way observation between a select (single select) and a data object.\n     *\n     * @param {HTMLSelectElement} select The select to observe for changes.\n     * @param {Object}            data   The object containing the value attribute.\n     * @param {string}            path   The path for the value property.\n     *\n     * @return {number} The observer id to use to unobserve again.\n     */\n    FormSpy.observeSelect = function (select, data, path) {\n        if (path === void 0) { path = 'value'; }\n        if (!this.observeJsIncluded())\n            return;\n        var observer = new PathObserver(data, path);\n        observer.open(function (newValue, oldValue) {\n            // Check if newValue is empty\n            if (!newValue)\n                return;\n            // respond to data.<value> having changed value.\n            var option = select.querySelector('option[value=\"' + newValue + '\"]');\n            // Create a new option with the updated value if such a option does not exist\n            if (option === null) {\n                option = document.createElement('option');\n                option.value = newValue;\n                option.innerText = newValue;\n                select.appendChild(option);\n            }\n            // Select the corresponding option\n            option.selected = true;\n        });\n        var changeListener = function () {\n            if (Path.get(path).getValueFrom(data) !== this.value)\n                Path.get(path).setValueFrom(data, this.value);\n        };\n        select.addEventListener('change', changeListener, false);\n        return this.registerObserver(observer, changeListener, 'change', select);\n    };\n    /**\n     * Registers a new observer.\n     *\n     * @param  {any}                                                    observer The PathObserver object.\n     * @param  {EventListener}                                          listener The listener registered to determine changes on the dom element.\n     * @param  {string}                                                 type     The listener type.\n     * @param  {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement} element  The element the listener is bound to.\n     *\n     * @return {number}                 The observer id.\n     */\n    FormSpy.registerObserver = function (observer, listener, type, element) {\n        // Get a new observerID\n        var id = this.observerIDs++;\n        // Register the observer\n        this.observes[id] = {\n            observer: observer,\n            eventListener: listener,\n            element: element,\n            eventType: type\n        };\n        return id;\n    };\n    /**\n     * Checks if an element was removed from the DOM.\n     *\n     * @deprecated The element values can still be accessed if they are outside of the DOM.\n     *\n     * @param {HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement} element The element to check for removal.\n     * @param {Function}                                                   callback A callback function to trigger when the element get's removed.\n     */\n    FormSpy.onElementRemoval = function (element, callback) {\n        if (window.hasOwnProperty('MutationObserver')) {\n            // For browsers with MutationObserver\n            var mutObserver = new MutationObserver(function (mutations) {\n                mutations.forEach(function (mutation) {\n                    for (var i = 0; i < mutation.removedNodes.length; ++i) {\n                        if (mutation.removedNodes[i] === element) {\n                            callback();\n                            mutObserver.disconnect();\n                        }\n                    }\n                });\n            });\n            mutObserver.observe(element.parentElement, { childList: true });\n        }\n        else {\n            // For browsers without MutationObserver\n            var removeListener = function (event) {\n                if (event.target === element) {\n                    callback();\n                    element.parentElement.removeEventListener('DOMNodeRemove', removeListener);\n                }\n            };\n            element.parentElement.addEventListener('DOMNodeRemoved', removeListener);\n        }\n    };\n    /**\n     * Determines if observe-js was included.\n     *\n     * @return {boolean} If observe-js was included.\n     */\n    FormSpy.observeJsIncluded = function () {\n        var included = window.hasOwnProperty('PathObserver') && window.hasOwnProperty('Path');\n        if (!included)\n            console.error('FormSpy requires observe-js. https://github.com/Polymer/observe-js');\n        return included;\n    };\n    FormSpy.observerIDs = 0;\n    FormSpy.observes = [];\n    return FormSpy;\n})();\n"]}